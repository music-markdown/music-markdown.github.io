{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["history","createBrowserHistory","MarkdownMusic","props","_this","Object","classCallCheck","this","musicOpts","transpose","possibleConstructorReturn","getPrototypeOf","call","md","MarkdownIt","use","MarkdownItMusic","setTranspose","react_default","a","createElement","dangerouslySetInnerHTML","__html","render","source","React","Component","App","_this2","arrowUpKeyCode","arrowDownKeyCode","queryParams","queryString","parse","location","search","state","isLoaded","markdown","parseInt","handleKeyUpEvent","bind","assertThisInitialized","_this3","fetch","then","res","text","result","setState","event","keyCode","push","concat","pathname","stringify","_this$state","className","tabIndex","onKeyUp","App_MarkdownMusic","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","BrowserRouter","Route","path","exact","component","document","getElementById","URL","process","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.19505fee.chunk.js","sourcesContent":["import React from 'react';\nimport MarkdownIt from 'markdown-it';\nimport MarkdownItMusic from 'markdown-it-music'\nimport queryString from 'query-string';\nimport { createBrowserHistory } from 'history';\nimport './App.css';\n\nconst history = createBrowserHistory();\n\nclass MarkdownMusic extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let musicOpts = {\n      transpose: this.props.transpose\n    };\n\n    this.md = MarkdownIt()\n      .use(MarkdownItMusic, musicOpts);\n  }\n\n  render() {\n    this.md.setTranspose(this.props.transpose);\n    return (\n      <span dangerouslySetInnerHTML={{__html: this.md.render(this.props.source)}}/>\n    );\n  }\n}\n\n\nclass App extends React.Component {\n  arrowUpKeyCode = 38;\n  arrowDownKeyCode = 40;\n\n  constructor(props) {\n    super(props);\n\n    this.queryParams = queryString.parse(this.props.location.search);\n\n    this.state = {\n      isLoaded: false,\n      markdown: null,\n      transpose: parseInt(this.queryParams.transpose, 10) || 0\n    };\n\n    this.handleKeyUpEvent = this.handleKeyUpEvent.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"static/California Dreamin - Mama's and the Papa's.md\")\n      .then(res => res.text())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            markdown: result\n          })\n        }\n      );\n  }\n\n  handleKeyUpEvent(event) {\n    if (event.keyCode === this.arrowUpKeyCode) {\n      this.setState( {\n        transpose: this.state.transpose + 1\n      });\n    }\n    else if (event.keyCode === this.arrowDownKeyCode) {\n      this.setState({\n        transpose: this.state.transpose - 1\n      });\n    }\n\n    this.queryParams.transpose = this.state.transpose + 1;\n    history.push(`${this.props.location.pathname}${queryString.stringify(this.queryParams)}`);\n  }\n\n  render() {\n    const { isLoaded, markdown, transpose } = this.state;\n    if (!isLoaded) {\n      return (\n        <div className=\"App\">\n          <div>Loading...</div>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\" tabIndex=\"0\" onKeyUp={this.handleKeyUpEvent}>\n          <MarkdownMusic source={markdown} transpose={transpose} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router>\n        <Route path='/' exact component={App} />\n    </Router>,\n    document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}