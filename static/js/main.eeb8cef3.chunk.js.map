{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["MarkdownMusic","props","_this","Object","classCallCheck","this","musicOpts","transpose","possibleConstructorReturn","getPrototypeOf","call","md","MarkdownIt","use","MarkdownItMusic","setTranspose","react_default","a","createElement","dangerouslySetInnerHTML","__html","render","source","React","Component","App","_this2","state","isLoaded","markdown","handleKeyUpEvent","bind","assertThisInitialized","_this3","fetch","then","res","text","result","setState","event","key","_this$state","className","tabIndex","onKeyUp","App_MarkdownMusic","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.eeb8cef3.chunk.js","sourcesContent":["import React from 'react';\nimport MarkdownIt from 'markdown-it';\n// import abc from 'abcjs';\nimport MarkdownItMusic from 'markdown-it-music'\nimport './App.css';\n\n\nclass MarkdownMusic extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let musicOpts = {\n      transpose: this.props.transpose\n    };\n\n    this.md = MarkdownIt()\n      .use(MarkdownItMusic, musicOpts);\n  }\n\n  render() {\n    this.md.setTranspose(this.props.transpose);\n    return (\n      <span dangerouslySetInnerHTML={{__html: this.md.render(this.props.source)}}/>\n    );\n  }\n}\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isLoaded: false,\n      markdown: null,\n      transpose: 0\n    };\n\n    this.handleKeyUpEvent = this.handleKeyUpEvent.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"static/California Dreamin - Mama's and the Papa's.md\")\n      .then(res => res.text())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            markdown: result\n          })\n        }\n      );\n  }\n\n  handleKeyUpEvent(event) {\n    if (event.key === \"ArrowUp\") {\n      this.setState( {\n        transpose: this.state.transpose + 1\n      });\n    }\n    else if (event.key === \"ArrowDown\") {\n      this.setState({\n        transpose: this.state.transpose - 1\n      });\n    }\n  }\n\n  render() {\n    const { isLoaded, markdown, transpose } = this.state;\n    if (!isLoaded) {\n      return (\n        <div className=\"App\">\n          <div>Loading...</div>\n        </div>\n      )\n    } else {\n      return (\n        <div className=\"App\" tabIndex=\"0\" onKeyUp={this.handleKeyUpEvent}>\n          <MarkdownMusic source={markdown} transpose={transpose} />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}